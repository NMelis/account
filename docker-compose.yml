---

# Default compose file for development and production.
# Should be used directly in development.
# Automatically loads `docker-compose.override.yml` if it exists.
# No extra steps required.
# Should be used together with `docker/docker-compose.prod.yml`
# in production.

version: "3.6"
services:
  db:
    image: "postgres:9.6.9-alpine"
    restart: on-failure:3
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - webnet
    env_file: ./config/.env

  nginx:
    image: nginx:1.13.12
    restart: on-failure:3
    volumes:
      - ./docker/nginx/:/etc/nginx/conf.d
      - django-static:/var/www/static
    ports:
      - "80:8000"
    networks:
      - webnet
    depends_on:
      - web

  web:
    <<: &web
      # Image name is changed in production:
      image: "account:dev"
      restart: on-failure:3
      build:
        target: development_build
        context: .
        dockerfile: ./docker/django/Dockerfile
        args:
          DJANGO_ENV: development
        cache_from:
          - "account:dev"
          - "account:latest"
          - "*"

      volumes:
        - django-static:/var/www/django/static
      depends_on:
        - db
      networks:
        - webnet
      env_file: ./config/.env
      environment:
        DJANGO_DATABASE_HOST: db

    command: bash docker/django/gunicorn.sh
    healthcheck:
      # We use `$$` here because:
      # one `$` goes to shell,
      # one `$` goes to `docker-compose.yml` escaping
      test: |
        /usr/bin/test $$(
          /usr/bin/curl --fail http://localhost:8000/api/health/?format=json
          --write-out "%{http_code}" --silent --output /dev/null
        ) -eq 200
      interval: 120s
      timeout: 5s
      retries: 5
      start_period: 30s

  celery:
    build:
      context: .
      dockerfile: ./docker/django/Dockerfile
    command: celery -A server worker -l info
    restart: on-failure:3
    networks:
      - webnet
    volumes:
      - ./:/code/
    depends_on:
      - db
      - redis

  celery-beat:
    build:
      context: .
      dockerfile: ./docker/django/Dockerfile
    command: celery -A server beat -l info
    restart: on-failure:3
    networks:
      - webnet
    volumes:
      - ./:/code/
    depends_on:
      - db
      - redis

  redis:
    image: "redis:6.0.6"
    restart: on-failure:3
    networks:
      - webnet
    env_file: ./config/.env
networks:
  # Network for your internals, use it by default:
  webnet:

volumes:
  pgdata:
  django-static:
